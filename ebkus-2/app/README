Dateien der EBKuS Klientenverwaltung Anwendungsschnittstelle:


Verzeichnis EBKuS
=================

config.py		  Konfigurationsparameter
start.py		  Startdatei für die Anwendung (Python-Publisher)
ebs.py			  Publishing-Startmodul zum Import von EBKuS.py


Generierung, Migration: Verzeichnis ebkus/gen
=============================================

schemadata.py             Definitionen des Datenbank-Schemas als String
migrdata.py		  Daten (Code, Kategorien, Statistik) für den Start

schemagen.py		  Genererierung des neuen Schemas in der Datenbank
genEB.py		  Generierung der Anwendungsschnittstelle - Klassen

genschema.py		  Aufruf für schemagen.py
genebapi.py		  Aufruf für genEB.py

migrate.py		  Aufruf zum Importiert der Daten aus migrdata.py
			  in die DB.


Datenbankmodule: Verzeichnis ebkus/db
=====================================

sql.py			  Datenbankschnittstelle und Klassen für SQL-Statements
dbapp.py                  Basisklassen für Python Datenbankobjekte
dbcache.py		  Objekt-Cache


Anwendung: Verzeichnis ebkus/app
================================

EBKuS.py		  Hauptklasse für die Suche nach den Objekten,
			  welche publiziert werden sollen.
Request.py		  Allgemeine Klasse für den Request
ebapigen.py		  Die generierte Anwendungsschnittstelle,
			  nicht editieren! Enthält die Klassen und Objekte.
ebapi.py		  EB Anwendungsschnittstelle
ebapih.py		  Hilfsfunktionen für die HTML-Ausgabe
ebupd.py		  Alle Inserts und Updates für die Datenbank
jghexport.py		  Erstellt Exportdatei für das Statistische Landesamt
dbexport.py		  Im- und Export der Daten für andere EBKuS-Datenbanken
cronjobs.py		  Cronjobs für Unix (In der Crontab eintragen)


Publikationsobjekte: Verzeichnis ebkus/html
===========================================

templates.py		  Alle HTML-Templates

			  Die Klassen zum Publizieren:

abfragen.py		  Abfragen
administration.py	  Administration
akte.py			  Akte und Fall
aktenvorblatt.py	  Aktenvorblatt zum Drucken
anmeldung.py		  Anmeldung
bezugsperson.py		  Bezugspersonen
code.py			  Code und Kategorieen
datenaustausch.py	  Datenaustausch
dokument.py		  Dokumente
dokumentenkarte.py	  Dokumentenkarte
einrichtungskontakt.py	  Einrichtungskontakte
fachstatistik.py	  Fachstatistik
gruppe.py		  Gruppen
gruppenkarte.py		  Gruppenkarte
jghstatistik.py		  Bundesjugendhilfestatistik
klientenkarte.py	  Klientenkarte
leistung.py		  Leistungen
menu.py			  Hauptmenü
mitarbeiter.py		  Mitarbeiter
viewdokument.py		  Anzeige und Druck von Dokumenten
zustaendigkeit.py	  Zuständigkeiten für Akten und Fälle


Publisher: Verzeichnis ebkus/bobo
=================================
Siehe die spezielle Lizenz in den Dateien und die Autoren!

BoboHTTPServer.py	HTTP-Server (bei kleineren Veränderungen am
			Programm Alternative zum Apache für kleine,
			lokale Installationen und zum Entwickeln.)
bobo.py			Debugger bobo - Command-Line-Interface
bci.py			Aufruf Interface für Bobo.
CGIResponse.py		CGI Output Formatierer
pcgi_publisher.py	CGI-Wrapper
cgi_module_publisher.py Python Objekt Publisher


Spezielle Utilities: im Verzeichnis ebkus/stuff
===================


ebkus			Bootskript von EBKuS für SuSE-Linux-Distribution
ebkus.sh		Startskript für EBKuS als Hintergrundprozess
			(Linux)
et.py			Notizdatei zum Ausprobieren von Codefragmenten
timing.py		Perfomance-Messug


PDF-Bibliothek
==============

Das Verzeichnis ebkus/reportlab enthält die
PDF-Library. (vgl. Lizenz!)


MySQL-python
============

Das Verzeichnis mysql-python-* enthält das Python-Module für die
Datenbank MySQL (vgl. die beiliegende Lizenz).


TODO
====

Modul sql erzeugt Exceptions der Klasse SQLError und Modul dbapp
der Klasse DBAppError. Es fehlt aber ein Liste aller Exceptions.

- Liste der Fehlermeldungen und ihrer Bedeutung erstellen.


Migration
=========

Für die Migration - das Anlegen der Tabellen, das Generieren der
Anwendungsschnittstelle, das Importieren der Daten in die Tabelle -
sind folgende Schritte notwendig:

1. Erzeugung des neuen Schemas (genschema.py als Skript
ausführen)
2. Generierung der Anwendungsschnittstelle (genebapi.py als Skript
ausführen)
3. Die Daten aus migrdata.py in die Tabellen importieren
(migrate.py als Skript ausführen)

Die drei Schritte könne beliebig wiederholt werden. Je nach dem,
welche Datenquellen verändert wurden, genügt es, lediglich
Schritte 2-3 oder nur Schritt 3 zu wiederholen.

Wenn jedes Skript ohne Exceptions gelaufen ist, kann man ziemlich
zuversichtlich sein, daß alles geklappt hat.








